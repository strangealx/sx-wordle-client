/* tslint:disable */
/* eslint-disable */
/**
 * sx-wordle
 * Simple wordle like game
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration'
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from './base'

/**
 *
 * @export
 * @interface Character
 */
export interface Character {
  /**
   *
   * @type {string}
   * @memberof Character
   */
  character: string
  /**
   *
   * @type {boolean}
   * @memberof Character
   */
  position: boolean
  /**
   *
   * @type {boolean}
   * @memberof Character
   */
  exists: boolean
}
/**
 *
 * @export
 * @interface Game
 */
export interface Game {
  /**
   *
   * @type {number}
   * @memberof Game
   */
  id: number
  /**
   * sha-512 hash of the word
   * @type {string}
   * @memberof Game
   */
  hash: string
  /**
   * salt used for hash, presented when complete is \"true\"
   * @type {string}
   * @memberof Game
   */
  salt?: string
  /**
   *
   * @type {boolean}
   * @memberof Game
   */
  complete: boolean
  /**
   *
   * @type {Array<GuessResponse>}
   * @memberof Game
   */
  guess: Array<GuessResponse>
  /**
   * presented when complete is \"true\"
   * @type {string}
   * @memberof Game
   */
  result?: GameResultEnum
  /**
   * the word, presented when complete is \"true\"
   * @type {string}
   * @memberof Game
   */
  secret?: string
}

export const GameResultEnum = {
  Success: 'SUCCESS',
  Fail: 'FAIL',
} as const

export type GameResultEnum = typeof GameResultEnum[keyof typeof GameResultEnum]

/**
 *
 * @export
 * @interface Guess
 */
export interface Guess {
  /**
   *
   * @type {string}
   * @memberof Guess
   */
  guess: string
}
/**
 *
 * @export
 * @interface GuessResponse
 */
export interface GuessResponse {
  /**
   *
   * @type {number}
   * @memberof GuessResponse
   */
  id: number
  /**
   *
   * @type {Array<Character>}
   * @memberof GuessResponse
   */
  result: Array<Character>
}

/**
 * WordleApi - axios parameter creator
 * @export
 */
export const WordleApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create new game instance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createNewGame: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/game`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Find game by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameById: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getGameById', 'id', id)
      const localVarPath = `/game/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Add new guess
     * @param {number} id
     * @param {Guess} [guess]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    makeGuess: async (
      id: number,
      guess?: Guess,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('makeGuess', 'id', id)
      const localVarPath = `/game/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        guess,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * WordleApi - functional programming interface
 * @export
 */
export const WordleApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = WordleApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Create new game instance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createNewGame(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Game>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createNewGame(
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary Find game by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGameById(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Game>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getGameById(
        id,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary Add new guess
     * @param {number} id
     * @param {Guess} [guess]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async makeGuess(
      id: number,
      guess?: Guess,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Game>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.makeGuess(
        id,
        guess,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * WordleApi - factory interface
 * @export
 */
export const WordleApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = WordleApiFp(configuration)
  return {
    /**
     *
     * @summary Create new game instance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createNewGame(options?: any): AxiosPromise<Game> {
      return localVarFp
        .createNewGame(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Find game by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameById(id: number, options?: any): AxiosPromise<Game> {
      return localVarFp
        .getGameById(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Add new guess
     * @param {number} id
     * @param {Guess} [guess]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    makeGuess(id: number, guess?: Guess, options?: any): AxiosPromise<Game> {
      return localVarFp
        .makeGuess(id, guess, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * WordleApi - object-oriented interface
 * @export
 * @class WordleApi
 * @extends {BaseAPI}
 */
export class WordleApi extends BaseAPI {
  /**
   *
   * @summary Create new game instance
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WordleApi
   */
  public createNewGame(options?: AxiosRequestConfig) {
    return WordleApiFp(this.configuration)
      .createNewGame(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Find game by id
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WordleApi
   */
  public getGameById(id: number, options?: AxiosRequestConfig) {
    return WordleApiFp(this.configuration)
      .getGameById(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Add new guess
   * @param {number} id
   * @param {Guess} [guess]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WordleApi
   */
  public makeGuess(id: number, guess?: Guess, options?: AxiosRequestConfig) {
    return WordleApiFp(this.configuration)
      .makeGuess(id, guess, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
